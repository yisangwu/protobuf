<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: pack.proto

namespace Pack\Base;

use UnexpectedValueException;

/**
 * Protobuf type <code>pack.base.LoginType</code>
 */
class LoginType
{
    /**
     * Generated from protobuf enum <code>GUEST = 0;</code>
     */
    const GUEST = 0;
    /**
     * Generated from protobuf enum <code>APPLE = 1;</code>
     */
    const APPLE = 1;
    /**
     * Generated from protobuf enum <code>RENREN = 2;</code>
     */
    const RENREN = 2;
    /**
     * Generated from protobuf enum <code>FACEBOOK = 3;</code>
     */
    const FACEBOOK = 3;
    /**
     * Generated from protobuf enum <code>KAIXIN = 4;</code>
     */
    const KAIXIN = 4;
    /**
     * Generated from protobuf enum <code>GAMECENTER = 5;</code>
     */
    const GAMECENTER = 5;
    /**
     * Generated from protobuf enum <code>SINA = 6;</code>
     */
    const SINA = 6;
    /**
     * Generated from protobuf enum <code>WEICHAT = 7;</code>
     */
    const WEICHAT = 7;
    /**
     * Generated from protobuf enum <code>ALIPAY = 8;</code>
     */
    const ALIPAY = 8;

    private static $valueToName = [
        self::GUEST => 'GUEST',
        self::APPLE => 'APPLE',
        self::RENREN => 'RENREN',
        self::FACEBOOK => 'FACEBOOK',
        self::KAIXIN => 'KAIXIN',
        self::GAMECENTER => 'GAMECENTER',
        self::SINA => 'SINA',
        self::WEICHAT => 'WEICHAT',
        self::ALIPAY => 'ALIPAY',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

